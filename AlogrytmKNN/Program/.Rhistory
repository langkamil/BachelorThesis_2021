dane <- PimaIndiansDiabetes
dane <- data.frame(sapply(dane, as.factor))
str(dane)
summary(dane)
dane = dane[!(apply(dane[,2:9], 1, function(y) any(y == 0))),]
dane$diabetes <- as.factor(dane$diabetes)
podzial <- createDataPartition(dane$diabetes, p = 0.80, list = FALSE)
trening <- dane[podzial, ]
test <- dane[-podzial, ]
model <- naiveBayes(diabetes ~ ., data = trening)
predykcja <- predict(model, test)
eval_model(test$diabetes, predykcja)
table(predykcja, test$diabetes)
dane <- data.frame(sapply(dane, as.factor))
str(dane)
summary(dane)
dane = dane[!(apply(dane[,2:9], 1, function(y) any(y == 0))),]
dane$diabetes <- as.factor(dane$diabetes)
podzial <- createDataPartition(dane$diabetes, p = 0.80, list = FALSE)
trening <- dane[podzial, ]
test <- dane[-podzial, ]
model <- naiveBayes(diabetes ~ ., data = trening)
predykcja <- predict(model, test)
eval_model(test$diabetes, predykcja)
table(predykcja, test$diabetes)
data(PimaIndiansDiabetes)
dane <- PimaIndiansDiabetes
dane <- data.frame(sapply(dane, as.factor))
str(dane)
summary(dane)
dane = dane[!(apply(dane[,2:9], 1, function(y) any(y == 0))),]
dane$diabetes <- as.factor(dane$diabetes)
podzial <- createDataPartition(dane$diabetes, p = 0.80, list = FALSE)
trening <- dane[podzial, ]
test <- dane[-podzial, ]
model <- naiveBayes(diabetes ~ ., data = trening)
predykcja <- predict(model, test)
eval_model(test$diabetes, predykcja)
table(predykcja, test$diabetes)
dane <- data.frame(sapply(dane, as.factor))
str(dane)
summary(dane)
dane = dane[!(apply(dane[,2:9], 1, function(y) any(y == 0))),]
dane$diabetes <- as.factor(dane$diabetes)
podzial <- createDataPartition(dane$diabetes, p = 0.80, list = FALSE)
trening <- dane[podzial, ]
test <- dane[-podzial, ]
model <- naiveBayes(diabetes ~ ., data = trening)
predykcja <- predict(model, test)
eval_model(test$diabetes, predykcja)
table(predykcja, test$diabetes)
library(mlbench)
library(e1071)
library(OneR)
library(caret)
data(PimaIndiansDiabetes)
dane <- PimaIndiansDiabetes
#dane <- data.frame(sapply(dane, as.factor))
str(dane)
summary(dane)
dane = dane[!(apply(dane[,2:9], 1, function(y) any(y == 0))),]
dane$diabetes <- as.factor(dane$diabetes)
podzial <- createDataPartition(dane$diabetes, p = 0.80, list = FALSE)
trening <- dane[podzial, ]
test <- dane[-podzial, ]
model <- naiveBayes(diabetes ~ ., data = trening)
predykcja <- predict(model, test)
eval_model(test$diabetes, predykcja)
table(predykcja, test$diabetes)
dane = dane[!(apply(dane[,2:9], 1, function(y) any(y == 0))),]
dane <- PimaIndiansDiabetes
#dane <- data.frame(sapply(dane, as.factor))
str(dane)
summary(dane)
dane = dane[!(apply(dane[,2:9], 1, function(y) any(y == 0))),]
dane = dane[!(apply(dane[,2:9], 1, function(y) any(y == 0))),]
dane = dane[!(apply(dane[,2:9], 1, function(y) any(y == 0))),]
dane = dane[!(apply(dane[,2:9], 1, function(y) any(y == 0))),]
View(dane)
row_sub = apply(dane, 1, function(row) all(row !=0 ))
# ##Subset as usual
dane = dane[row_sub,]
View(dane)
dane = dane[!(apply(dane[,2:9], 1
, function(y) any(y == 0))),]
View(dane)
dane = dane[!(apply(dane[,2:9], 1, function(y) any(y = 0))),]
dane = dane[!(apply(dane[,2:9], 1, function(y) any(y == 0))),]
View(dane)
dane_nowe = dane[!(apply(dane[,2:9], 1, function(y) any(y == 0))),]
dane = dane[!(apply(dane[,2:9], 1, function(y) any(y == 0))),]
row_sub = apply(dane, 1, function(row) all(row !=0 ))
##Subset as usual
dane = dane[row_sub,]
data(PimaIndiansDiabetes)
dane <- PimaIndiansDiabetes
dane <- data.frame(sapply(dane, as.factor))
str(dane)
summary(dane)
dane = dane[!(apply(dane[,2:9], 1, function(y) any(y == 0))),]
dane$diabetes <- as.factor(dane$diabetes)
podzial <- createDataPartition(dane$diabetes, p = 0.80, list = FALSE)
trening <- dane[podzial, ]
test <- dane[-podzial, ]
model <- naiveBayes(diabetes ~ ., data = trening)
predykcja <- predict(model, test)
eval_model(test$diabetes, predykcja)
table(predykcja, test$diabetes)
dane <- PimaIndiansDiabetes
dane <- data.frame(sapply(dane, as.factor))
str(dane)
summary(dane)
dane = dane[!(apply(dane[,2:9], 1, function(y) any(y == 0))),]
dane$diabetes <- as.factor(dane$diabetes)
podzial <- createDataPartition(dane$diabetes, p = 0.80, list = FALSE)
trening <- dane[podzial, ]
test <- dane[-podzial, ]
model <- naiveBayes(diabetes ~ ., data = trening)
predykcja <- predict(model, test)
eval_model(test$diabetes, predykcja)
table(predykcja, test$diabetes)
data(PimaIndiansDiabetes)
dane <- PimaIndiansDiabetes
dane <- data.frame(sapply(dane, as.factor))
str(dane)
summary(dane)
dane = dane[!(apply(dane[,2:9], 1, function(y) any(y == 0))),]
dane$diabetes <- as.factor(dane$diabetes)
podzial <- createDataPartition(dane$diabetes, p = 0.80, list = FALSE)
trening <- dane[podzial, ]
test <- dane[-podzial, ]
model <- naiveBayes(diabetes ~ ., data = trening)
predykcja <- predict(model, test)
eval_model(test$diabetes, predykcja)
table(predykcja, test$diabetes)
library(mlbench)
library(e1071)
library(OneR)
library(caret)
data(PimaIndiansDiabetes)
dane <- PimaIndiansDiabetes
dane <- data.frame(sapply(dane, as.factor))
str(dane)
summary(dane)
dane = dane[!(apply(dane[,2:9], 1, function(y) any(y == 0))),]
dane$diabetes <- as.factor(dane$diabetes)
podzial <- createDataPartition(dane$diabetes, p = 0.80, list = FALSE)
trening <- dane[podzial, ]
test <- dane[-podzial, ]
model <- naiveBayes(diabetes ~ ., data = trening)
predykcja <- predict(model, test)
eval_model(test$diabetes, predykcja)
table(predykcja, test$diabetes)
setwd("C:\\Users\\Kamil\\Documents\\licencjat\\PrzykÅ‚ady_licencjat\\NaiwnyKlasyfikatorBayesa")
library(mlbench)
library(e1071)
library(OneR)
library(caret)
data(PimaIndiansDiabetes)
dane <- PimaIndiansDiabetes
dane <- data.frame(sapply(dane, as.factor))
str(dane)
summary(dane)
dane = dane[!(apply(dane[,2:9], 1, function(y) any(y == 0))),]
dane$diabetes <- as.factor(dane$diabetes)
podzial <- createDataPartition(dane$diabetes, p = 0.80, list = FALSE)
trening <- dane[podzial, ]
test <- dane[-podzial, ]
model <- naiveBayes(diabetes ~ ., data = trening)
predykcja <- predict(model, test)
eval_model(test$diabetes, predykcja)
table(predykcja, test$diabetes)
setwd("C:\\Users\\Kamil\\Documents\\licencjat\\PrzykÅ‚ady_licencjat\\NaiwnyKlasyfikatorBayesa")
library(mlbench)
library(e1071)
library(OneR)
library(caret)
data(PimaIndiansDiabetes)
dane <- PimaIndiansDiabetes
dane <- data.frame(sapply(dane, as.factor))
str(dane)
summary(dane)
dane = dane[!(apply(dane[,2:9], 1, function(y) any(y == 0))),]
dane$diabetes <- as.factor(dane$diabetes)
podzial <- createDataPartition(dane$diabetes, p = 0.80, list = FALSE)
trening <- dane[podzial, ]
test <- dane[-podzial, ]
model <- naiveBayes(diabetes ~ ., data = trening)
predykcja <- predict(model, test)
eval_model(test$diabetes, predykcja)
eval_model(test$diabetes, predykcja)[1]
ev = eval_model(test$diabetes, predykcja)
View(ev)
data(PimaIndiansDiabetes)
dane <- PimaIndiansDiabetes
dane <- data.frame(sapply(dane, as.factor))
head(dane)
str(dane)
data(PimaIndiansDiabetes)
dane <- PimaIndiansDiabetes
dane <- data.frame(sapply(dane, as.factor))
head(dane)
str(dane)
summary(dane)
dane = dane[!(apply(dane[,2:9], 1, function(y) any(y == 0))),]
dane_norm = normalize(dane, method = "range", range = c(0,1))
library(BBmisc)
data(PimaIndiansDiabetes)
dane <- PimaIndiansDiabetes
dane <- data.frame(sapply(dane, as.factor))
head(dane)
str(dane)
summary(dane)
dane = dane[!(apply(dane[,2:9], 1, function(y) any(y == 0))),]
dane_norm = normalize(dane, method = "range", range = c(0,1))
dane$diabetes <- as.factor(dane$diabetes)
podzial <- createDataPartition(dane$diabetes, p = 0.80, list = FALSE)
trening <- dane[podzial, ]
test <- dane[-podzial, ]
model <- naiveBayes(diabetes ~ ., data = trening)
predykcja <- predict(model, test)
table(predykcja, test$diabetes)
eval_model(test$diabetes , predykcja)
dane <- data.frame(sapply(dane, as.factor))
head(dane)
str(dane)
summary(dane)
dane = dane[!(apply(dane[,2:9], 1, function(y) any(y == 0))),]
dane = normalize(dane, method = "range", range = c(0,1))
library(mlbench)
library(e1071)
library(OneR)
library(caret)
library(BBmisc)
data(PimaIndiansDiabetes)
dane <- PimaIndiansDiabetes
dane <- data.frame(sapply(dane, as.factor))
head(dane)
str(dane)
summary(dane)
dane = dane[!(apply(dane[,2:9], 1, function(y) any(y == 0))),]
dane = normalize(dane, method = "range", range = c(0,1))
dane$diabetes <- as.factor(dane$diabetes)
podzial <- createDataPartition(dane$diabetes, p = 0.80, list = FALSE)
trening <- dane[podzial, ]
test <- dane[-podzial, ]
model <- naiveBayes(diabetes ~ ., data = trening)
predykcja <- predict(model, test)
table(predykcja, test$diabetes)
eval_model(test$diabetes , predykcja)
View(dane)
data(PimaIndiansDiabetes)
dane <- PimaIndiansDiabetes
dane <- data.frame(sapply(dane, as.factor))
head(dane)
str(dane)
summary(dane)
dane = dane[!(apply(dane[,2:9], 1, function(y) any(y == 0))),]
podzial <- createDataPartition(dane$diabetes, p = 0.80, list = FALSE)
trening <- dane[podzial, ]
test <- dane[-podzial, ]
model <- naiveBayes(diabetes ~ ., data = trening)
predykcja <- predict(model, test)
table(predykcja, test$diabetes)
eval_model(test$diabetes , predykcja)
dane_fix <- dane[!(apply(dane[,2:9], 1, function(y) any(y == 0))),]
podzial <- createDataPartition(dane$diabetes, p = 0.80, list = FALSE)
podzial <- createDataPartition(dane_fix$diabetes, p = 0.80, list = FALSE)
trening <- dane_fix[podzial, ]
test <- dane_fix[-podzial, ]
predykcja <- predict(model, test)
table(predykcja, test$diabetes)
eval_model(test$diabetes , predykcja)
View(dane_fix)
View(trening)
View(test)
data(PimaIndiansDiabetes)
dane <- PimaIndiansDiabetes
dane <- data.frame(sapply(dane, as.factor))
head(dane)
str(dane)
summary(dane)
dane_fix <- dane[!(apply(dane[,2:9], 1, function(y) any(y == 0))),]
podzial <- createDataPartition(dane_fix$diabetes, p = 0.80, list = FALSE)
trening <- dane_fix[podzial, ]
test <- dane_fix[-podzial, ]
model <- naiveBayes(diabetes ~ ., data = trening)
predykcja <- predict(model, test)
table(predykcja, test$diabetes)
eval_model(test$diabetes , predykcja)
data(PimaIndiansDiabetes)
dane <- PimaIndiansDiabetes
dane <- data.frame(sapply(dane, as.factor))
head(dane)
str(dane)
summary(dane)
dane_fix <- dane[!(apply(dane[,2:9], 1, function(y) any(y == 0))),]
podzial <- createDataPartition(dane_fix$diabetes, p = 0.80, list = FALSE)
trening <- dane_fix[podzial, ]
test <- dane_fix[-podzial, ]
model <- naiveBayes(diabetes ~ ., data = trening)
predykcja <- predict(model, test)
table(predykcja, test$diabetes)
eval_model(test$diabetes , predykcja)
data(PimaIndiansDiabetes)
dane <- PimaIndiansDiabetes
dane <- data.frame(sapply(dane, as.factor))
head(dane)
str(dane)
summary(dane)
dane_fix <- dane[!(apply(dane[,2:9], 1, function(y) any(y == 0))),]
podzial <- createDataPartition(dane_fix$diabetes, p = 0.80, list = FALSE)
trening <- dane_fix[podzial, ]
test <- dane_fix[-podzial, ]
model <- naiveBayes(diabetes ~ ., data = trening)
predykcja <- predict(model, test)
table(predykcja, test$diabetes)
eval_model(test$diabetes , predykcja)
summary(dane)
head(dane)
str(dane)
summary(dane)
data(PimaIndiansDiabetes)
dane <- PimaIndiansDiabetes
dane <- data.frame(sapply(dane, as.factor))
head(dane)
library(mlbench)
library(e1071)
library(OneR)
library(caret)
dane <- PimaIndiansDiabetes
library(mlbench)
library(e1071)
library(OneR)
library(caret)
dane <- PimaIndiansDiabetes
dane <- data.frame(sapply(dane, as.factor))
data(PimaIndiansDiabetes)
dane <- PimaIndiansDiabetes
dane <- data.frame(sapply(dane, as.factor))
head(dane)
str(dane)
(dane)
head(dane)
str(dane)
summary(dane)
data(PimaIndiansDiabetes)
dane <- PimaIndiansDiabetes
head(dane)
str(dane)
summary(dane)
data(PimaIndiansDiabetes)
dane <- PimaIndiansDiabetes
head(dane)
str(dane)
head(dane)
data(PimaIndiansDiabetes)
dane <- PimaIndiansDiabetes
head(dane)
str(dane)
summary(dane)
library(mlbench)
library(e1071)
library(OneR)
library(caret)
data(PimaIndiansDiabetes)
dane <- PimaIndiansDiabetes
head(dane)
str(dane)
summary(dane)
dane <- data.frame(sapply(dane, as.factor))
dane_fix <- dane[!(apply(dane[,2:9], 1, function(y) any(y == 0))),]
podzial <- createDataPartition(dane_fix$diabetes, p = 0.80, list = FALSE)
trening <- dane_fix[podzial, ]
test <- dane_fix[-podzial, ]
model <- naiveBayes(diabetes ~ ., data = trening)
predykcja <- predict(model, test)
table(predykcja, test$diabetes)
eval_model(test$diabetes , predykcja)
setwd("C:\\Users\\Kamil\\Documents\\licencjat\\PrzykÅ‚ady_licencjat\\AlogrytmKNN")
library(BBmisc)
library(caret)
library(OneR)
dane = iris
# dane <- data.frame(sapply(dane, as.factor))
head(dane)
tail(dane)
str(dane)
summary(dane)
# Iris scatter plot
ggplot(data = iris, aes(x = Sepal.Length, y = Sepal.Width, col = Species)) +
geom_point()
ggplot(data = iris, aes(x = Petal.Length, y = Petal.Width, col = Species)) +
geom_point()
dane_norm = normalize(dane, method = "range", range = c(0,1))
podzial <- createDataPartition(dane_norm$Species, p=0.75, list=FALSE)
# Subset training set with index
trening <- dane_norm[podzial,]
# Subset test set with index
test <- dane_norm[-podzial,]
model <- train(trening[, 1:4], trening[, 5],   method = 'knn')
model
# Predict the labels of the test set
predykcja <- predict.train(object = model, test[,1:4], type="raw")
table(predykcja, test$Species)
eval_model(test$Species, predykcja)
library(BBmisc)
library(caret)
library(OneR)
dane = iris
# dane <- data.frame(sapply(dane, as.factor))
head(dane)
tail(dane)
str(dane)
summary(dane)
# Iris scatter plot
ggplot(data = iris, aes(x = Sepal.Length, y = Sepal.Width, col = Species)) +
geom_point()
ggplot(data = iris, aes(x = Petal.Length, y = Petal.Width, col = Species)) +
geom_point()
dane_norm = normalize(dane, method = "range", range = c(0,1))
podzial <- createDataPartition(dane_norm$Species, p=0.75, list=FALSE)
# Subset training set with index
trening <- dane_norm[podzial,]
# Subset test set with index
test <- dane_norm[-podzial,]
model <- train(trening[, 1:4], trening[, 5],   method = 'knn')
model
# Predict the labels of the test set
predykcja <- predict.train(object = model, test[,1:4], type="raw")
table(predykcja, test$Species)
eval_model(test$Species, predykcja)
dane = iris
dane = iris
# dane <- data.frame(sapply(dane, as.factor))
head(dane)
tail(dane)
str(dane)
summary(dane)
# Iris scatter plot
ggplot(data = iris, aes(x = Sepal.Length, y = Sepal.Width, col = Species)) +
geom_point()
ggplot(data = iris, aes(x = Petal.Length, y = Petal.Width, col = Species)) +
geom_point()
dane_norm = normalize(dane, method = "range", range = c(0,1))
View(dane_norm)
View(dane)
View(dane_norm)
# Predict the labels of the test set
predykcja <- predict.train(object = model, test[,1:4])
podzial <- createDataPartition(dane_norm$Species, p=0.75, list=FALSE)
# Subset training set with index
trening <- dane_norm[podzial,]
# Subset test set with index
test <- dane_norm[-podzial,]
model <- train(trening[, 1:4], trening[, 5],   method = 'knn')
model
# Predict the labels of the test set
predykcja <- predict.train(object = model, test[,1:4])
table(predykcja, test$Species)
eval_model(test$Species, predykcja)
dane <- iris
head(dane)
tail(dane)
str(dane)
summary(dane)
dane <- iris
str(dane)
summary(dane)
model <- train(trening[, 1:4], trening[, 5],   method = 'knn')
dane <- iris
str(dane)
summary(dane)
ggplot(data = iris, aes(x = Sepal.Length, y = Sepal.Width, col = Species)) +
geom_point()
ggplot(data = iris, aes(x = Petal.Length, y = Petal.Width, col = Species)) +
geom_point()
dane_norm <- normalize(dane, method = "range", range = c(0,1))
podzial <- createDataPartition(dane_norm$Species, p=0.75, list=FALSE)
trening <- dane_norm[podzial,]
test <- dane_norm[-podzial,]
model <- train(trening[, 1:4], trening[, 5],   method = 'knn')
model
# Predict the labels of the test set
predykcja <- predict.train(object = model, test[,1:4])
table(predykcja, test$Species)
eval_model(test$Species, predykcja)
# Predict the labels of the test set
predykcja <- predict.train(object = model, test[,1:4])
table(predykcja, test$Species)
eval_model(test$Species, predykcja)
library(BBmisc)
library(caret)
library(OneR)
dane <- iris
str(dane)
summary(dane)
ggplot(data = iris, aes(x = Sepal.Length, y = Sepal.Width, col = Species)) +
geom_point()
ggplot(data = iris, aes(x = Petal.Length, y = Petal.Width, col = Species)) +
geom_point()
dane_norm <- normalize(dane, method = "range", range = c(0,1))
head(dane)
head(dane_norm)
podzial <- createDataPartition(dane_norm$Species, p=0.75, list=FALSE)
trening <- dane_norm[podzial,]
test <- dane_norm[-podzial,]
model <- train(trening[, 1:4], trening[, 5],   method = 'knn')
model
predykcja <- predict.train(object = model, test[,1:4])
table(predykcja, test$Species)
eval_model(test$Species, predykcja)
