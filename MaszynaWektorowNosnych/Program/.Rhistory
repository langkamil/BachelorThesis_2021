podzial <- createDataPartition(dane$diabetes, p = 0.80, list = FALSE)
trening <- dane[podzial, ]
test <- dane[-podzial, ]
model <- naiveBayes(diabetes ~ ., data = trening)
predykcja <- predict(model, test)
eval_model(test$diabetes, predykcja)
library(MASS)
library(e1071)
library(caret)
data(cats)
dane = cats
model <- svm(Sex ~ ., data = dane)
print(model)
plot(model, dane)
podzial <- createDataPartition(dane$Sex, p = 0.70, list = FALSE)
trening <- dane[podzial, ]
test <- dane[-podzial, ]
svm.cats <- svm(Sex ~ ., data = trening)
prediction.svm <- predict(svm.cats, test[, -1], type = "class")
table(test[, 1], prediction.svm)
model <- svm(Sex ~ ., data = trening)
predykcja <- predict(model, test[, -1], type = "class")
table(test[, 1], predykcja)
library(MASS)
library(e1071)
library(caret)
data(cats)
dane = cats
model <- svm(Sex ~ ., data = dane)
print(model)
plot(model, dane)
podzial <- createDataPartition(dane$Sex, p = 0.70, list = FALSE)
trening <- dane[podzial, ]
test <- dane[-podzial, ]
model <- svm(Sex ~ ., data = trening)
predykcja <- predict(model, test[, -1], type = "class")
table(test[, 1], predykcja)
plot(model, trening)
plot(model, trening)
predykcja <- predict(model_trening, test[, -1], type = "class")
model_trening <- svm(Sex ~ ., data = trening)
predykcja <- predict(model_trening, test[, -1], type = "class")
table(test[, 1], predykcja)
library(MASS)
library(e1071)
library(caret)
data(cats)
dane = cats
model_dane <- svm(Sex ~ ., data = dane)
print(model)
plot(model_dane, dane)
print(model_dane)
plot(model_dane, dane)
podzial <- createDataPartition(dane$Sex, p = 0.70, list = FALSE)
trening <- dane[podzial, ]
test <- dane[-podzial, ]
model_trening <- svm(Sex ~ ., data = trening)
predykcja <- predict(model_trening, test[, -1], type = "class")
table(test[, 1], predykcja)
?cats
library(OneR)
eval_model(predykcja, test)
eval_model(predykcja, test[,1])
library(MASS)
library(e1071)
library(caret)
library(OneR)
data(cats)
dane = cats
?cats
model_dane <- svm(Sex ~ ., data = dane)
print(model_dane)
plot(model_dane, dane)
podzial <- createDataPartition(dane$Sex, p = 0.70, list = FALSE)
trening <- dane[podzial, ]
test <- dane[-podzial, ]
model_trening <- svm(Sex ~ ., data = trening)
predykcja <- predict(model_trening, test[, -1], type = "class")
table(test[, 1], predykcja)
eval_model(predykcja, test[,1])
summary(dane)
?plot
dim(dane)
str(dane)
library(MASS)
library(e1071)
library(caret)
library(OneR)
data(cats)
dane = cats
str(dane)
summary(dane)
model_dane <- svm(Sex ~ ., data = dane)
print(model_dane)
plot(model_dane, dane)
model_dane <- svm(Sex ~ ., data = dane)
print(model_dane)
plot(model_dane, dane)
model_trening
podzial <- createDataPartition(dane$Sex, p = 0.70, list = FALSE)
trening <- dane[podzial, ]
test <- dane[-podzial, ]
model_trening <- svm(Sex ~ ., data = trening)
model_trening
print(model_trening)
model_trening
predykcja <- predict(model_trening, test[, -1], type = "class")
eval_model(predykcja, test[,1])
setwd("C:\\Users\\Kamil\\Documents\\licencjat\\PrzykÅ‚ady_licencjat\\MaszynaWektorowNosnych")
library(MASS)
library(e1071)
library(caret)
library(OneR)
data(cats)
dane = cats
View(dane)
dane_norm <- normalize(dane, method = "range", range = c(0,1))
library(BBmisc)
dane_norm <- normalize(dane, method = "range", range = c(0,1))
View(dane_norm)
View(cats)
model_dane <- svm(Sex ~ ., data = dane_norm)
plot(model_dane, dane_norm)
?plot
podzial <- createDataPartition(dane_norm$Sex, p = 0.70, list = FALSE)
trening <- dane[podzial, ]
test <- dane[-podzial, ]
model_trening <- svm(Sex ~ ., data = trening)
predykcja <- predict(model_trening, test[, -1], type = "class")
eval_model(predykcja, test[,1])
library(MASS)
library(e1071)
library(caret)
library(OneR)
library(BBmisc)
data(cats)
dane = cats
str(dane)
summary(dane)
dane_norm <- normalize(dane, method = "range", range = c(0,1))
model_dane <- svm(Sex ~ ., data = dane_norm)
plot(model_dane, dane_norm)
?plot
podzial <- createDataPartition(dane_norm$Sex, p = 0.70, list = FALSE)
trening <- dane[podzial, ]
test <- dane[-podzial, ]
model_trening <- svm(Sex ~ ., data = trening)
predykcja <- predict(model_trening, test[, -1], type = "class")
eval_model(predykcja, test[,1])
model_dane <- svm(Sex ~ ., data = dane_norm)
plot(model_dane, dane_norm)
?plot
podzial <- createDataPartition(dane_norm$Sex, p = 0.70, list = FALSE)
trening <- dane[podzial, ]
test <- dane[-podzial, ]
model_trening <- svm(Sex ~ ., data = trening)
predykcja <- predict(model_trening, test[, -1], type = "class")
eval_model(predykcja, test[,1])
dane_norm <- normalize(dane, method = "range", range = c(0,1))
model_dane <- svm(Sex ~ ., data = dane_norm)
plot(model_dane, dane_norm)
?plot
podzial <- createDataPartition(dane_norm$Sex, p = 0.70, list = FALSE)
trening <- dane[podzial, ]
test <- dane[-podzial, ]
model_trening <- svm(Sex ~ ., data = trening)
predykcja <- predict(model_trening, test[, -1], type = "class")
eval_model(predykcja, test[,1])
dane_norm <- normalize(dane, method = "range", range = c(0,1))
model_dane <- svm(Sex ~ ., data = dane_norm)
plot(model_dane, dane_norm)
?plot
podzial <- createDataPartition(dane_norm$Sex, p = 0.70, list = FALSE)
trening <- dane[podzial, ]
test <- dane[-podzial, ]
model_trening <- svm(Sex ~ ., data = trening)
predykcja <- predict(model_trening, test[, -1], type = "class")
eval_model(predykcja, test[,1])
str(dane)
summary(dane)
dane_norm <- normalize(dane, method = "range", range = c(0,1))
model_dane <- svm(Sex ~ ., data = dane_norm)
plot(model_dane, dane_norm)
?plot
podzial <- createDataPartition(dane_norm$Sex, p = 0.70, list = FALSE)
trening <- dane[podzial, ]
test <- dane[-podzial, ]
model_trening <- svm(Sex ~ ., data = trening)
predykcja <- predict(model_trening, test[, -1], type = "class")
eval_model(predykcja, test[,1])
data(cats)
dane = cats
str(dane)
summary(dane)
dane_norm <- normalize(dane, method = "range", range = c(0,1))
model_dane <- svm(Sex ~ ., data = dane_norm)
plot(model_dane, dane_norm)
?plot
podzial <- createDataPartition(dane_norm$Sex, p = 0.70, list = FALSE)
trening <- dane[podzial, ]
test <- dane[-podzial, ]
model_trening <- svm(Sex ~ ., data = trening)
predykcja <- predict(model_trening, test[, -1], type = "class")
eval_model(predykcja, test[,1])
dane_scale <- scale(dane_norm)
dane_norm[2] <- scale(dane_norm[2])
dane_norm[3] <- scale(dane_norm[3])
model_dane <- svm(Sex ~ ., data = dane_norm)
plot(model_dane, dane_norm)
?plot
podzial <- createDataPartition(dane_norm$Sex, p = 0.70, list = FALSE)
trening <- dane[podzial, ]
test <- dane[-podzial, ]
model_trening <- svm(Sex ~ ., data = trening)
predykcja <- predict(model_trening, test[, -1], type = "class")
eval_model(predykcja, test[,1])
model_dane <- svm(Sex ~ ., data = dane_norm)
plot(model_dane, dane_norm)
?plot
podzial <- createDataPartition(dane_norm$Sex, p = 0.70, list = FALSE)
trening <- dane[podzial, ]
test <- dane[-podzial, ]
model_trening <- svm(Sex ~ ., data = trening)
predykcja <- predict(model_trening, test[, -1], type = "class")
eval_model(predykcja, test[,1])
model_dane <- svm(Sex ~ ., data = dane_norm)
plot(model_dane, dane_norm)
?plot
podzial <- createDataPartition(dane_norm$Sex, p = 0.70, list = FALSE)
trening <- dane[podzial, ]
test <- dane[-podzial, ]
model_trening <- svm(Sex ~ ., data = trening)
predykcja <- predict(model_trening, test[, -1], type = "class")
eval_model(predykcja, test[,1])
model_dane <- svm(Sex ~ ., data = dane_norm)
plot(model_dane, dane_norm)
?plot
podzial <- createDataPartition(dane_norm$Sex, p = 0.70, list = FALSE)
trening <- dane[podzial, ]
test <- dane[-podzial, ]
model_trening <- svm(Sex ~ ., data = trening)
predykcja <- predict(model_trening, test[, -1], type = "class")
eval_model(predykcja, test[,1])
podzial <- createDataPartition(dane_norm$Sex, p = 0.80, list = FALSE)
trening <- dane[podzial, ]
test <- dane[-podzial, ]
model_trening <- svm(Sex ~ ., data = trening)
predykcja <- predict(model_trening, test[, -1], type = "class")
eval_model(predykcja, test[,1])
podzial <- createDataPartition(dane_norm$Sex, p = 0.80, list = FALSE)
trening <- dane[podzial, ]
test <- dane[-podzial, ]
model_trening <- svm(Sex ~ ., data = trening)
predykcja <- predict(model_trening, test[, -1], type = "class")
eval_model(predykcja, test[,1])
podzial <- createDataPartition(dane_norm$Sex, p = 0.80, list = FALSE)
trening <- dane[podzial, ]
test <- dane[-podzial, ]
model_trening <- svm(Sex ~ ., data = trening)
predykcja <- predict(model_trening, test[, -1], type = "class")
eval_model(predykcja, test[,1])
podzial <- createDataPartition(dane_norm$Sex, p = 0.80, list = FALSE)
trening <- dane[podzial, ]
test <- dane[-podzial, ]
model_trening <- svm(Sex ~ ., data = trening)
predykcja <- predict(model_trening, test[, -1], type = "class")
eval_model(predykcja, test[,1])
podzial <- createDataPartition(dane_norm$Sex, p = 0.80, list = FALSE)
trening <- dane[podzial, ]
test <- dane[-podzial, ]
model_trening <- svm(Sex ~ ., data = trening)
predykcja <- predict(model_trening, test[, -1], type = "class")
eval_model(predykcja, test[,1])
podzial <- createDataPartition(dane_norm$Sex, p = 0.80, list = FALSE)
trening <- dane[podzial, ]
test <- dane[-podzial, ]
model_trening <- svm(Sex ~ ., data = trening)
predykcja <- predict(model_trening, test[, -1], type = "class")
eval_model(predykcja, test[,1])
podzial <- createDataPartition(dane_norm$Sex, p = 0.80, list = FALSE)
trening <- dane[podzial, ]
test <- dane[-podzial, ]
model_trening <- svm(Sex ~ ., data = trening)
predykcja <- predict(model_trening, test[, -1], type = "class")
eval_model(predykcja, test[,1])
podzial <- createDataPartition(dane_norm$Sex, p = 0.80, list = FALSE)
trening <- dane[podzial, ]
test <- dane[-podzial, ]
model_trening <- svm(Sex ~ ., data = trening)
predykcja <- predict(model_trening, test[, -1], type = "class")
eval_model(predykcja, test[,1])
podzial <- createDataPartition(dane_norm$Sex, p = 0.80, list = FALSE)
trening <- dane[podzial, ]
test <- dane[-podzial, ]
model_trening <- svm(Sex ~ ., data = trening)
predykcja <- predict(model_trening, test[, -1], type = "class")
eval_model(predykcja, test[,1])
podzial <- createDataPartition(dane_norm$Sex, p = 0.80, list = FALSE)
trening <- dane[podzial, ]
test <- dane[-podzial, ]
model_trening <- svm(Sex ~ ., data = trening)
predykcja <- predict(model_trening, test[, -1], type = "class")
eval_model(predykcja, test[,1])
podzial <- createDataPartition(dane_norm$Sex, p = 0.80, list = FALSE)
trening <- dane[podzial, ]
test <- dane[-podzial, ]
model_trening <- svm(Sex ~ ., data = trening)
predykcja <- predict(model_trening, test[, -1], type = "class")
eval_model(predykcja, test[,1])
podzial <- createDataPartition(dane_norm$Sex, p = 0.80, list = FALSE)
trening <- dane[podzial, ]
test <- dane[-podzial, ]
model_trening <- svm(Sex ~ ., data = trening)
predykcja <- predict(model_trening, test[, -1], type = "class")
eval_model(predykcja, test[,1])
podzial <- createDataPartition(dane_norm$Sex, p = 0.80, list = FALSE)
trening <- dane[podzial, ]
test <- dane[-podzial, ]
model_trening <- svm(Sex ~ ., data = trening)
predykcja <- predict(model_trening, test[, -1], type = "class")
eval_model(predykcja, test[,1])
podzial <- createDataPartition(dane_norm$Sex, p = 0.80, list = FALSE)
trening <- dane[podzial, ]
test <- dane[-podzial, ]
model_trening <- svm(Sex ~ ., data = trening)
predykcja <- predict(model_trening, test[, -1], type = "class")
eval_model(predykcja, test[,1])
podzial <- createDataPartition(dane_norm$Sex, p = 0.80, list = FALSE)
trening <- dane[podzial, ]
test <- dane[-podzial, ]
model_trening <- svm(Sex ~ ., data = trening)
predykcja <- predict(model_trening, test[, -1], type = "class")
eval_model(predykcja, test[,1])
podzial <- createDataPartition(dane_norm$Sex, p = 0.50, list = FALSE)
trening <- dane[podzial, ]
test <- dane[-podzial, ]
model_trening <- svm(Sex ~ ., data = trening)
predykcja <- predict(model_trening, test[, -1], type = "class")
eval_model(predykcja, test[,1])
podzial <- createDataPartition(dane_norm$Sex, p = 0.50, list = FALSE)
trening <- dane[podzial, ]
test <- dane[-podzial, ]
model_trening <- svm(Sex ~ ., data = trening)
predykcja <- predict(model_trening, test[, -1], type = "class")
eval_model(predykcja, test[,1])
podzial <- createDataPartition(dane_norm$Sex, p = 0.60, list = FALSE)
trening <- dane[podzial, ]
test <- dane[-podzial, ]
model_trening <- svm(Sex ~ ., data = trening)
predykcja <- predict(model_trening, test[, -1], type = "class")
eval_model(predykcja, test[,1])
podzial <- createDataPartition(dane_norm$Sex, p = 0.60, list = FALSE)
trening <- dane[podzial, ]
test <- dane[-podzial, ]
model_trening <- svm(Sex ~ ., data = trening)
predykcja <- predict(model_trening, test[, -1], type = "class")
eval_model(predykcja, test[,1])
podzial <- createDataPartition(dane_norm$Sex, p = 0.60, list = FALSE)
trening <- dane[podzial, ]
test <- dane[-podzial, ]
model_trening <- svm(Sex ~ ., data = trening)
predykcja <- predict(model_trening, test[, -1], type = "class")
eval_model(predykcja, test[,1])
for (i in 1:10){
podzial <- createDataPartition(dane_norm$Sex, p = 0.60, list = FALSE)
trening <- dane[podzial, ]
test <- dane[-podzial, ]
model_trening <- svm(Sex ~ ., data = trening)
predykcja <- predict(model_trening, test[, -1], type = "class")
# table(test[, 1], predykcja)
eval_model(predykcja, test[,1])
}
for (i in 1:10){
podzial <- createDataPartition(dane_norm$Sex, p = 0.60, list = FALSE)
trening <- dane[podzial, ]
test <- dane[-podzial, ]
model_trening <- svm(Sex ~ ., data = trening)
predykcja <- predict(model_trening, test[, -1], type = "class")
# table(test[, 1], predykcja)
eval_model(predykcja, test[,1])
}
View(dane_norm)
data(cats)
dane = cats
str(dane)
summary(dane)
dane_norm <- normalize(dane, method = "range", range = c(0,1))
model_dane <- svm(Sex ~ ., data = dane_norm)
plot(model_dane, dane_norm)
?plot
for (i in 1:10){
podzial <- createDataPartition(dane_norm$Sex, p = 0.60, list = FALSE)
trening <- dane[podzial, ]
test <- dane[-podzial, ]
model_trening <- svm(Sex ~ ., data = trening)
predykcja <- predict(model_trening, test[, -1], type = "class")
# table(test[, 1], predykcja)
eval_model(predykcja, test[,1])
}
data(cats)
dane = cats
str(dane)
data(cats)
dane = cats
str(dane)
summary(dane)
dane_norm <- normalize(dane, method = "range", range = c(0,1))
model_dane <- svm(Sex ~ ., data = dane_norm)
plot(model_dane, dane_norm)
for (i in 1:10){
podzial <- createDataPartition(dane_norm$Sex, p = 0.60, list = FALSE)
trening <- dane[podzial, ]
test <- dane[-podzial, ]
model_trening <- svm(Sex ~ ., data = trening)
predykcja <- predict(model_trening, test[, -1], type = "class")
# table(test[, 1], predykcja)
eval_model(predykcja, test[,1])
}
for (i in 1:10){
dane_norm <- normalize(dane, method = "range", range = c(0,1))
podzial <- createDataPartition(dane_norm$Sex, p = 0.60, list = FALSE)
trening <- dane[podzial, ]
test <- dane[-podzial, ]
model_trening <- svm(Sex ~ ., data = trening)
predykcja <- predict(model_trening, test[, -1], type = "class")
# table(test[, 1], predykcja)
eval_model(predykcja, test[,1])
}
View(dane_norm)
for (i in 1:10){
dane_norm <- normalize(dane, method = "range", range = c(0,1))
podzial <- createDataPartition(dane_norm$Sex, p = 0.60, list = FALSE)
trening <- dane[podzial, ]
test <- dane[-podzial, ]
model_trening <- svm(Sex ~ ., data = trening)
predykcja <- predict(model_trening, test[, -1], type = "class")
# table(test[, 1], predykcja)
eval_model(predykcja, test[,1])
}
library(MASS)
library(e1071)
library(caret)
library(OneR)
library(BBmisc)
data(cats)
dane = cats
str(dane)
summary(dane)
model_dane <- svm(Sex ~ ., data = dane_norm)
plot(model_dane, dane_norm)
for (i in 1:10){
dane_norm <- normalize(dane, method = "range", range = c(0,1))
podzial <- createDataPartition(dane_norm$Sex, p = 0.60, list = FALSE)
trening <- dane[podzial, ]
test <- dane[-podzial, ]
model_trening <- svm(Sex ~ ., data = trening)
predykcja <- predict(model_trening, test[, -1], type = "class")
# table(test[, 1], predykcja)
eval_model(predykcja, test[,1])
}
dane_norm
tail(dane_norm)
head(dane_norm)
head(dane_norm)
summary(dane_norm)
tail(dane_norm)
range(dane_norm)
library(BBmisc)
library(caret)
library(OneR)
dane <- iris
str(dane)
summary(dane)
ggplot(data = iris, aes(x = Sepal.Length, y = Sepal.Width, col = Species)) +
geom_point()
ggplot(data = iris, aes(x = Petal.Length, y = Petal.Width, col = Species)) +
geom_point()
dane_norm <- normalize(dane, method = "range", range = c(0,1))
podzial <- createDataPartition(dane_norm$Species, p=0.75, list=FALSE)
trening <- dane_norm[podzial,]
test <- dane_norm[-podzial,]
model <- train(trening[, 1:4], trening[, 5],   method = 'knn')
model
# Predict the labels of the test set
predykcja <- predict.train(object = model, test[,1:4])
table(predykcja, test$Species)
eval_model(test$Species, predykcja)
head(dane)
head(dane_norm)
library(MASS)
library(e1071)
library(caret)
library(OneR)
library(BBmisc)
data(cats)
data(cats)
dane <- cats
str(dane)
summary(dane)
model_dane <- svm(Sex ~ ., data = dane_norm)
plot(model_dane, dane_norm)
dane_norm <- normalize(dane, method = "range", range = c(0,1))
head(dane_norm)
tail(dane_norm)
summary(dane_norm)
podzial <- createDataPartition(dane_norm$Sex, p = 0.60, list = FALSE)
trening <- dane[podzial, ]
test <- dane[-podzial, ]
model_trening <- svm(Sex ~ ., data = trening)
predykcja <- predict(model_trening, test[, -1], type = "class")
eval_model(predykcja, test[,1])
eval_model(predykcja, test[,1])
