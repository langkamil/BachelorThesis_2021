setwd("C:\\Users\\Kamil\\Documents\\Baza_przykladow_R\\ITMLR_NaiveBayes")
library(e1071)
breast_cancer = data.frame(read.table("wdbc.txt", header = T,
sep = "\t"))
breast_cancer = data.frame(read.table("C:\\Users\\Kamil\\Documents\\Baza_przykladow_R\\ITMLR_NaiveBayes\\wdbc.data", header = T,
sep = "\t"))
View(breast_cancer)
View(breast_cancer)
breast_cancer = data.frame(read.table("C:\\Users\\Kamil\\Documents\\Baza_przykladow_R\\ITMLR_NaiveBayes\\wdbc.data", header = F,
sep = "\t"))
View(breast_cancer)
View(breast_cancer)
names(breast_cancer) <- c("SampleCodeNumber", "ClumpThickness",
"UniformityofCellSize", "UniformityofCellShape", "MarginalAdhesion",
"SingleEpithelialCellSize", "BareNuclei", "BlandChromatin",
"NormalNucleoli", "Mitoses", "Class")
breast_cancer = data.frame(read.table("C:\\Users\\Kamil\\Documents\\Baza_przykladow_R\\ITMLR_NaiveBayes\\wdbc.data", header = F,
sep = "\t"))
names(breast_cancer) <- c("SampleCodeNumber", "ClumpThickness",
"UniformityofCellSize", "UniformityofCellShape", "MarginalAdhesion",
"SingleEpithelialCellSize", "BareNuclei", "BlandChromatin",
"NormalNucleoli", "Mitoses", "Class")
breast_cancer <- data.frame(sapply(breast_cancer, as.factor))
breast_cancer_features <- breast_cancer[, 2:11]
nb.model <- naiveBayes(Class ~ ., data = breast_cancer_features)
print(nb.model)
names(breast_cancer) <- c("SampleCodeNumber", "ClumpThickness",
"UniformityofCellSize", "UniformityofCellShape", "MarginalAdhesion",
"SingleEpithelialCellSize", "BareNuclei", "BlandChromatin",
"NormalNucleoli", "Mitoses", "Class")
breast_cancer = data.frame(read.delim2("C:\\Users\\Kamil\\Documents\\Baza_przykladow_R\\ITMLR_NaiveBayes\\wdbc.data", header = F,
sep = "\t"))
View(breast_cancer)
View(breast_cancer)
breast_cancer = data.frame(read.delim("C:\\Users\\Kamil\\Documents\\Baza_przykladow_R\\ITMLR_NaiveBayes\\wdbc.data", header = F,
sep = "\t"))
View(breast_cancer)
View(breast_cancer)
breast_cancer = data.frame(read.delim("C:\\Users\\Kamil\\Documents\\Baza_przykladow_R\\ITMLR_NaiveBayes\\wdbc.data", header = F,
sep = ","))
breast_cancer = data.frame(read.table("C:\\Users\\Kamil\\Documents\\Baza_przykladow_R\\ITMLR_NaiveBayes\\wdbc.data", header = F,
sep = ","))
View(breast_cancer)
View(breast_cancer)
breast_cancer = data.frame(read.table("C:\\Users\\Kamil\\Documents\\Baza_przykladow_R\\ITMLR_NaiveBayes\\wdbc.data", header = F,
sep = ","))
breast_cancer = data.frame(read.table("C:\\Users\\Kamil\\Documents\\Baza_przykladow_R\\ITMLR_NaiveBayes\\wpbc.data", header = F,
sep = ","))
names(breast_cancer) <- c("SampleCodeNumber", "ClumpThickness",
"UniformityofCellSize", "UniformityofCellShape", "MarginalAdhesion",
"SingleEpithelialCellSize", "BareNuclei", "BlandChromatin",
"NormalNucleoli", "Mitoses", "Class")
breast_cancer = data.frame(read.table("C:\\Users\\Kamil\\Documents\\Baza_przykladow_R\\ITMLR_NaiveBayes\\breast-cancer-wisconsin.data", header = F,
sep = ","))
names(breast_cancer) <- c("SampleCodeNumber", "ClumpThickness",
"UniformityofCellSize", "UniformityofCellShape", "MarginalAdhesion",
"SingleEpithelialCellSize", "BareNuclei", "BlandChromatin",
"NormalNucleoli", "Mitoses", "Class")
View(breast_cancer)
View(breast_cancer)
breast_cancer <- data.frame(sapply(breast_cancer, as.factor))
breast_cancer_features <- breast_cancer[, 2:11]
nb.model <- naiveBayes(Class ~ ., data = breast_cancer_features)
print(nb.model)
breast_cancer_complete <-
breast_cancer_features[complete.cases(breast_cancer_features),
]
breast_cancer_complete$Class <- as.factor(breast_cancer_complete$Class)
data.samples <- sample(1:nrow(breast_cancer_complete),
nrow(breast_cancer_complete) *
0.7, replace = FALSE)
training.data <- breast_cancer_complete[data.samples, ]
test.data <- breast_cancer_complete[-data.samples, ]
nb.model <- naiveBayes(Class ~ ., data = training.data)
prediction.nb <- predict(nb.model, test.data)
table(test.data$Class, prediction.nb)
table(test.data$Class, prediction.nb)
library(e1071)
breast_cancer = data.frame(read.table("C:\\Users\\Kamil\\Documents\\Baza_przykladow_R\\ITMLR_NaiveBayes\\breast-cancer-wisconsin.data", header = F,
sep = ","))
names(breast_cancer) <- c("SampleCodeNumber", "ClumpThickness",
"UniformityofCellSize", "UniformityofCellShape", "MarginalAdhesion",
"SingleEpithelialCellSize", "BareNuclei", "BlandChromatin",
"NormalNucleoli", "Mitoses", "Class")
breast_cancer <- data.frame(sapply(breast_cancer, as.factor))
breast_cancer_features <- breast_cancer[, 2:11]
nb.model <- naiveBayes(Class ~ ., data = breast_cancer_features)
print(nb.model)
breast_cancer_complete <-
breast_cancer_features[complete.cases(breast_cancer_features),
]
breast_cancer_complete$Class <- as.factor(breast_cancer_complete$Class)
data.samples <- sample(1:nrow(breast_cancer_complete),
nrow(breast_cancer_complete) *
0.7, replace = FALSE)
training.data <- breast_cancer_complete[data.samples, ]
test.data <- breast_cancer_complete[-data.samples, ]
nb.model <- naiveBayes(Class ~ ., data = training.data)
prediction.nb <- predict(nb.model, test.data)
table(test.data$Class, prediction.nb)
View(breast_cancer)
View(breast_cancer)
library(e1071)
breast_cancer = data.frame(read.table("C:\\Users\\Kamil\\Documents\\Baza_przykladow_R\\ITMLR_NaiveBayes\\breast-cancer-wisconsin.data", header = F,
sep = ","))
View(breast_cancer)
library(OneR)
dane = breastcancer
names(breast_cancer) <- c("SampleCodeNumber", "ClumpThickness",
"UniformityofCellSize", "UniformityofCellShape", "MarginalAdhesion",
"SingleEpithelialCellSize", "BareNuclei", "BlandChromatin",
"NormalNucleoli", "Mitoses", "Class")
View(breast_cancer)
View(breast_cancer)
breast_cancer <- data.frame(sapply(dane, as.factor))
dane = breastcancer
breast_cancer <- data.frame(sapply(dane, as.factor))
View(breast_cancer)
breast_cancer <- data.frame(sapply(dane, as.factor))
breast_cancer_features <- breast_cancer[, 2:11]
contorl = data.frame(read.table("C:\\Users\\Kamil\\Documents\\Baza_przykladow_R\\ITMLR_NaiveBayes\\breast-cancer-wisconsin.data", header = F,
sep = ","))
View(contorl)
breast_cancer <- data.frame(sapply(dane, as.factor))
nb.model <- naiveBayes(Class ~ ., data = breast_cancer)
print(nb.model)
breast_cancer_complete <-
breast_cancer[complete.cases(breast_cancer),
]
?sapply
?sapply
breast_cancer_complete <-
breast_cancer[complete.cases(breast_cancer),
]
breast_cancer_complete$Class <- as.factor(breast_cancer_complete$Class)
data.samples <- sample(1:nrow(breast_cancer_complete),
nrow(breast_cancer_complete) *
0.7, replace = FALSE)
training.data <- breast_cancer_complete[data.samples, ]
test.data <- breast_cancer_complete[-data.samples, ]
nb.model <- naiveBayes(Class ~ ., data = training.data)
prediction.nb <- predict(nb.model, test.data)
table(test.data$Class, prediction.nb)
data.samples <- createDataPartition(dane$Class, p = 0.60, list = FALSE)
library(e1071)
library(OneR)
data.samples <- createDataPartition(dane$Class, p = 0.60, list = FALSE)
library(caret)
data.samples <- createDataPartition(dane$Class, p = 0.60, list = FALSE)
training.data <- breast_cancer_complete[data.samples, ]
test.data <- breast_cancer_complete[-data.samples, ]
nb.model <- naiveBayes(Class ~ ., data = training.data)
prediction.nb <- predict(nb.model, test.data)
table(test.data$Class, prediction.nb)
eval_model(test.data$Class, prediction.nb)
print(nb.model)
library(OneR)
library(caret)
dane = breastcancer
dane <- data.frame(sapply(dane, as.factor))
model <- naiveBayes(Class ~ `Clump Thickness` + `Uniformity of Cell Size`
+ `Uniformity of Cell Shape` + `Single Epithelial Cell Size`,
data = breast_cancer)
library(e1071)
?naiveBayes
model <- naiveBayes(Class ~ `Clump Thickness` + `Uniformity of Cell Size`
+ `Uniformity of Cell Shape` + `Single Epithelial Cell Size`,
data = breast_cancer)
model <- naiveBayes(Class ~ `Clump Thickness` + `Uniformity of Cell Size`
+ `Uniformity of Cell Shape` + `Single Epithelial Cell Size`,
data = dane)
View(dane)
dane = breastcancer
summary(dane)
?sapply
View(dane)
dane <- data.frame(sapply(dane, as.factor))
View(dane)
dane <- data.frame(sapply(dane, as.factor))
model <- naiveBayes(Class ~ Clump.Thickness + Uniformity.of.Cell.Size
+ Uniformity.of.Cell.Shape + Single.Epithelial.Cell.Size,
data = dane)
View(model)
model <- train(Class ~ Clump.Thickness + Uniformity.of.Cell.Size
+ Uniformity.of.Cell.Shape + Single.Epithelial.Cell.Size,
data = trening, method = "glm",
family = "binomial")
predykcja <- predict(model, test[, -10])
table(predykcja, test[, 10])
eval_model(prediction = predykcja, test)
model <- naiveBayes(Class ~ Clump.Thickness + Uniformity.of.Cell.Size
+ Uniformity.of.Cell.Shape + Single.Epithelial.Cell.Size,
data = dane)
print(nb.model)
print(model)
?complete.cases
complete.cases(dane)
?as.factor
source('~/Baza_przykladow_R/ITMLR_NaiveBayes/NaiveBayes.R', echo=TRUE)
PimaIndiansDiabetes
library(e1071)
data(diabetes)
data(PimaIndiansDiabetes)
library(mlbench)
data(PimaIndiansDiabetes)
View(PimaIndiansDiabetes)
setwd("C:\\Users\\Kamil\\Documents\\Baza_przykladow_R\\wlasne_NaiveBayes")
PimaIndiansDiabetes
library(mlbench)
PimaIndiansDiabetes
data(PimaIndiansDiabetes)
View(PimaIndiansDiabetes)
PimaIndiansDiabetes = data(PimaIndiansDiabetes)
rm(PrimaIndiansDiabetes)
data(PimaIndiansDiabetes)
PimaIndiansDiabetes
summary(PID)
PID <- PimaIndiansDiabetes
summary(PID)
dane = PID
dane <- data.frame(sapply(dane, as.factor))
model <- naiveBayes(diabetes ~ .,
data = dane)
print(model)
dane_complete <-
dane[complete.cases(dane),
]
complete.cases(dane)
dane_complete$Class <- as.factor(dane_complete$diabetes)
podzial <- createDataPartition(dane$diabetes, p = 0.60, list = FALSE)
trening <- dane_complete[podzial, ]
test <- dane_complete[-podzial, ]
model <- naiveBayes(diabetes ~ ., data = trening)
eval_model(test$Class, predykcja)
predykcja <- predict(model, test)
eval_model(test$Class, predykcja)
data(PimaIndiansDiabetes)
data(PimaIndiansDiabetes)
library(mlbench)
data(PimaIndiansDiabetes)
dane <- PimaIndiansDiabetes
summary(dane)
dane <- data.frame(sapply(dane, as.factor))
View(dane)
View(dane)
model <- naiveBayes(diabetes ~ glucose + pressure + insulin + mass +
age,
data = dane)
library(e1071)
model <- naiveBayes(diabetes ~ glucose + pressure + insulin + mass +
age,
data = dane)
print(model)
dane_complete <- dane[complete.cases(dane), ]
complete.cases(dane)
dane_complete$Class <- as.factor(dane_complete$diabetes)
View(dane_complete)
data(PimaIndiansDiabetes)
View(PimaIndiansDiabetes)
dane <- PimaIndiansDiabetes
summary(dane)
dane <- data.frame(sapply(dane, as.factor))
model <- naiveBayes(diabetes ~ glucose + pressure + insulin + mass +
age,
data = dane)
dane_complete <- dane[complete.cases(dane), ]
complete.cases(dane)
dane_complete$diabetes <- as.factor(dane_complete$diabetes)
View(dane)
View(dane_complete)
View(dane_complete)
View(model)
View(dane_complete)
View(dane)
View(dane_complete)
View(dane_complete)
dane_complete$diabetes <- as.factor(dane_complete$diabetes)
podzial <- createDataPartition(dane$diabetes, p = 0.60, list = FALSE)
library(caret)
podzial <- createDataPartition(dane$diabetes, p = 0.60, list = FALSE)
View(podzial)
trening <- dane_complete[podzial, ]
test <- dane_complete[-podzial, ]
model <- naiveBayes(diabetes ~ glucose + pressure + insulin + mass +
age, data = trening)
predykcja <- predict(model, test)
eval_model(test$Class, predykcja)
library(OneR)
eval_model(test$Class, predykcja)
eval_model(test$diabetes, predykcja)
table(predykcja, test$diabetes)
model <- naiveBayes(diabetes ~ .,
data = dane)
print(model)
dane_complete <- dane[complete.cases(dane), ]
?complete.cases
complete.cases(dane)
?as.factor
dane_complete$diabetes <- as.factor(dane_complete$diabetes)
podzial <- createDataPartition(dane$diabetes, p = 0.60, list = FALSE)
trening <- dane_complete[podzial, ]
test <- dane_complete[-podzial, ]
model <- naiveBayes(diabetes ~ ., data = trening)
predykcja <- predict(model, test)
table(predykcja, test$diabetes)
eval_model(test$diabetes, predykcja)
table(predykcja, test$diabetes)
eval_model(test$diabetes, predykcja)
podzial <- createDataPartition(dane$diabetes, p = 0.70, list = FALSE)
trening <- dane_complete[podzial, ]
test <- dane_complete[-podzial, ]
model <- naiveBayes(diabetes ~ ., data = trening)
predykcja <- predict(model, test)
table(predykcja, test$diabetes)
podzial <- createDataPartition(dane$diabetes, p = 0.75, list = FALSE)
trening <- dane_complete[podzial, ]
test <- dane_complete[-podzial, ]
model <- naiveBayes(diabetes ~ ., data = trening)
predykcja <- predict(model, test)
table(predykcja, test$diabetes)
View(PimaIndiansDiabetes)
View(PimaIndiansDiabetes)
complete.cases()
?complete.cases()
?apply
?row
?all
row_sub = apply(dane, 1, function(row) all(row !=0 ))
##Subset as usual
dane[row_sub,]
##Subset as usual
dane = dane[row_sub,]
dane_complete <- dane[complete.cases(dane), ]
?complete.cases()
?complete.cases
complete.cases(dane)
?as.factor
dane_complete$diabetes <- as.factor(dane_complete$diabetes)
podzial <- createDataPartition(dane$diabetes, p = 0.75, list = FALSE)
trening <- dane_complete[podzial, ]
test <- dane_complete[-podzial, ]
model <- naiveBayes(diabetes ~ ., data = trening)
predykcja <- predict(model, test)
table(predykcja, test$diabetes)
eval_model(test$diabetes, predykcja)
table(predykcja, test$diabetes)
View(dane)
podzial <- createDataPartition(dane$diabetes, p = 0.60, list = FALSE)
trening <- dane_complete[podzial, ]
test <- dane_complete[-podzial, ]
model <- naiveBayes(diabetes ~ ., data = trening)
predykcja <- predict(model, test)
table(predykcja, test$diabetes)
eval_model(test$diabetes, predykcja)
row_sub = apply(dane, 1, function(row) dane$glucose(row !=0 ))
?all
row = dane[1]
View(test)
row = dane[2:9]
View(row)
row_sub = apply(dane, 1, function(row) all(row !=0 ))
##Subset as usual
dane = dane[row_sub,]
View(dane)
w = dane[2:9]
dane[!(apply(dane, 1, function(w) any(w == 0))),]
dane[!(apply(dane[2:9], 1, function(y) any(y == 0))),]
dane = dane[!(apply(dane[2:9], 1, function(y) any(y == 0))),]
View(dane)
dane[,2:9]
dane = dane[!(apply(dane[,2:9], 1, function(y) any(y == 0))),]
View(dane)
library(mlbench)
library(e1071)
library(OneR)
library(caret)
data(PimaIndiansDiabetes)
dane <- PimaIndiansDiabetes
summary(dane)
dane <- data.frame(sapply(dane, as.factor))
dane[,2:9]
dane[,2:9] = dane[!(apply(dane[,2:9], 1, function(y) any(y == 0))),]
dane[,2:9] = dane[,!(apply(dane[,2:9], 1, function(y) any(y == 0)))]
dane = dane[!(apply(dane[,2:9], 1, function(y) any(y == 0))),]
View(dane)
complete.cases(dane)
dane$diabetes <- as.factor(dane$diabetes)
podzial <- createDataPartition(dane$diabetes, p = 0.60, list = FALSE)
trening <- dane[podzial, ]
test <- dane[-podzial, ]
model <- naiveBayes(diabetes ~ ., data = trening)
predykcja <- predict(model, test)
table(predykcja, test$diabetes)
eval_model(test$diabetes, predykcja)
podzial <- createDataPartition(dane$diabetes, p = 0.80, list = FALSE)
trening <- dane[podzial, ]
test <- dane[-podzial, ]
model <- naiveBayes(diabetes ~ ., data = trening)
predykcja <- predict(model, test)
table(predykcja, test$diabetes)
eval_model(test$diabetes, predykcja)
View(dane)
View(PimaIndiansDiabetes)
View(trening)
View(test)
View(PimaIndiansDiabetes)
summary(dane)
library(mlbench)
library(e1071)
library(OneR)
library(caret)
data(PimaIndiansDiabetes)
dane <- PimaIndiansDiabetes
dane <- data.frame(sapply(dane, as.factor))
head(dane)
head(dane)
tail(dane)
dane = dane[!(apply(dane[,2:9], 1, function(y) any(y == 0))),]
View(dane)
View(dane)
View(dane)
dane$diabetes <- as.factor(dane$diabetes)
model <- naiveBayes(diabetes ~ ., data = trening)
dane$diabetes <- as.factor(dane$diabetes)
podzial <- createDataPartition(dane$diabetes, p = 0.80, list = FALSE)
trening <- dane[podzial, ]
test <- dane[-podzial, ]
model <- naiveBayes(diabetes ~ ., data = trening)
predykcja <- predict(model, test)
eval_model(test$diabetes, predykcja)
table(predykcja, test$diabetes)
setwd("C:\\User\s\Kami\l\Documents\\licencjat\\Przykłady_licencjat\\NaiwnyKlasyfikatorBayesa")
setwd("C:\\Users\Kami\l\Documents\\licencjat\\Przykłady_licencjat\\NaiwnyKlasyfikatorBayesa")
setwd("C:\\Users\Kamil\\Documents\\licencjat\\Przykłady_licencjat\\NaiwnyKlasyfikatorBayesa")
setwd("C:\\Users\\Kamil\\Documents\\licencjat\\Przykłady_licencjat\\NaiwnyKlasyfikatorBayesa")
data(PimaIndiansDiabetes)
library(mlbench)
data(PimaIndiansDiabetes)
dane <- PimaIndiansDiabetes
dane <- data.frame(sapply(dane, as.factor))
head(dane)
tail(dane)
dane = dane[!(apply(dane[,2:9], 1, function(y) any(y == 0))),]
dane$diabetes <- as.factor(dane$diabetes)
podzial <- createDataPartition(dane$diabetes, p = 0.80, list = FALSE)
trening <- dane[podzial, ]
test <- dane[-podzial, ]
model <- naiveBayes(diabetes ~ ., data = trening)
predykcja <- predict(model, test)
library(mlbench)
library(e1071)
library(OneR)
library(caret)
data(PimaIndiansDiabetes)
dane <- PimaIndiansDiabetes
head(dane)
tail(dane)
str(dane)
summary(dane)
library(mlbench)
library(mlbench)
library(e1071)
library(OneR)
library(caret)
data(PimaIndiansDiabetes)
dane <- PimaIndiansDiabetes
head(dane)
str(dane)
summary(dane)
dane <- data.frame(sapply(dane, as.factor))
dane_fix <- dane[!(apply(dane[,2:9], 1, function(y) any(y == 0))),]
podzial <- createDataPartition(dane_fix$diabetes, p = 0.80, list = FALSE)
trening <- dane_fix[podzial, ]
test <- dane_fix[-podzial, ]
model <- naiveBayes(diabetes ~ ., data = trening)
predykcja <- predict(model, test)
table(predykcja, test$diabetes)
eval_model(test$diabetes , predykcja)
